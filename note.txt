
it is important to acknowledg that the routung functionality provided by Go's servemux is pretty lightweight.
 it does not support routing based on the request method, it doesnot support clean URLs with variable in them,
 it does not support regexp-based patterns.
 
 but don't let that put you off, the reality is that Go's servemux can still get you quite far, and for many 
 applications perfectly sufficient. for the times that you need more, there is a huge choice of third-party 
 routers that you can use instead of Go's servermux

    RESPONSE METHOD IN GO

 1. w. methods (from http.ResponseWriter)
These give you raw control:
w.Write([]byte("...")) → write body
w.Header().Set("Key", "Value") → set headers
w.WriteHeader(http.StatusNotFound) → set status
👉 Lowest level, full flexibility.

2. http. helper functions (from net/http)
These are convenience wrappers that internally call w. methods:
http.NotFound(w, r) → sends 404 with default message
http.Error(w, "msg", code) → sends status + error body
http.Redirect(w, r, "/new", code) → sends redirect
http.ServeFile(w, r, "file.html") → serves files
👉 Saves boilerplate for common cases.

3. json. methods (from encoding/json)
These handle JSON serialization into the response:
json.NewEncoder(w).Encode(data) → writes JSON response
(Make sure to set w.Header().Set("Content-Type", "application/json") first)
👉 Best when building APIs.

✅ So yes:
Use w. when you want raw/manual control.
Use http. when you want built-in helpers.
Use json. when returning structured JSON data.

         WHAT IS THE DIFFERENT B/ W.HEADER.SET() AND W.WRITEHEADER
🔹 w.Header().Set(key, value)

What it does: modifies the HTTP response headers map.
Example:
w.Header().Set("Content-Type", "application/json")

You can call this multiple times before the response is sent.
Once the headers are sent (after WriteHeader or the first Write), further changes to headers are ignored.

🔹 w.WriteHeader(statusCode)
What it does: sets the HTTP status code (e.g., 200, 404, 500).
Example:
w.WriteHeader(http.StatusNotFound) // 404

Must be called before writing the body (w.Write).
If you don’t call it, Go automatically sends 200 OK when you first call w.Write.

🔑 Key Differences
Method	Purpose	Example
w.Header().Set("Key", "Value")	Sets header fields (like metadata)	Content-Type, Cache-Control, etc.
w.WriteHeader(code)	Sets status code	200 OK, 404 Not Found, 500 Internal Server Error
⚠️ Common Gotcha
w.Write([]byte("hello"))
w.WriteHeader(http.StatusNotFound) // ❌ too late


By the time you call w.Write, Go already sent 200 OK.
Status code must be set before writing any body.
✅ In short:
Header().Set → for response headers (must be before writing).
WriteHeader → for status code (must be before writing).